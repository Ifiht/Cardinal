plugins {
    id 'java'
    id 'xyz.jpenilla.run-paper' version '2.3.1'
    id 'com.gradleup.shadow' version '8.3.3'
}

group = 'org.evlis'
version = '0.2.0'

def targetJavaVersion = 21

repositories {
    mavenCentral()
    maven {
        name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
    maven {
        name = "aikars-framework"
        url = "https://repo.aikar.co/content/groups/aikar/"
    }
}

dependencies {
    compileOnly("io.papermc.paper:paper-api:1.21.1-R0.1-SNAPSHOT")
    implementation("co.aikar:acf-paper:0.5.1-SNAPSHOT")
    testImplementation 'com.github.seeseemelk:MockBukkit-v1.21:3.133.1'
    testImplementation('org.junit.jupiter:junit-jupiter-api:5.10.0')
    testRuntimeOnly('org.junit.jupiter:junit-jupiter-engine:5.10.0')
}

java {
    sourceCompatibility = JavaVersion.toVersion(targetJavaVersion)
    targetCompatibility = JavaVersion.toVersion(targetJavaVersion)
    toolchain.languageVersion.set(JavaLanguageVersion.of(targetJavaVersion))
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.compilerArgs += ["-parameters"]
    options.fork = true
    options.release.set(targetJavaVersion)
}

tasks {
    processResources {
        def props = [version: version]
        inputs.properties props
        filteringCharset 'UTF-8'
        filesMatching('plugin.yml') {
            expand props
        }
    }
    build { dependsOn(shadowJar) }
    shadowJar {
        relocate 'co.aikar.commands', 'Lunamatic.acf'
        relocate 'co.aikar.locales', 'Lunamatic.locales'
    }
    test {
        useJUnitPlatform()
        testLogging { events "passed", "skipped", "failed" }
    }
    runServer {
        // Configure the Minecraft version for our task.
        // This is the only required configuration besides applying the plugin.
        // Your plugin's jar (or shadowJar if present) will be used automatically.
        minecraftVersion("1.21.1")
        downloadPlugins {
            github("Ifiht", "AutoStop", "v1.1.0", "AutoStop-1.1.0.jar")
        }
    }
}

runPaper.folia.registerTask() {
    minecraftVersion("1.20.6")
}

tasks.register("checkServerLogs") {
    doLast {
        // Path to the latest.log file
        File logFile = file("run/logs/latest.log")

        // Check if the log file exists
        if (!logFile.exists()) {
            throw new GradleException("Log file not found: " + logFile.getAbsolutePath())
        }

        // Read the log file line by line
        def logContent = logFile.readLines()

        // Find lines that contain the " ERROR]:" substring
        def errorLines = logContent.findAll { it.contains("ERROR]:") }

        if (!errorLines.isEmpty()) {
            println "Errors were found:"
            errorLines.each { line ->
                println line // Print the full line that contains " ERROR]"
            }
            throw new GradleException("Errors found in log file.")
        } else {
            println "No errors found in log file."
        }
    }
}
